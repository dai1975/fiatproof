use std;

pub const SIZE:usize        = 12;

pub const VERSION:[u8; SIZE]     = [0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const VERACK:[u8; SIZE]      = [0x76, 0x65, 0x72, 0x61, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const ADDR:[u8; SIZE]        = [0x61, 0x64, 0x64, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const INV:[u8; SIZE]         = [0x69, 0x6e, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const GETDATA:[u8; SIZE]     = [0x67, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const MERKLEBLOCK:[u8; SIZE] = [0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x00];
pub const GETBLOCKS:[u8; SIZE]   = [0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x00, 0x00, 0x00];
pub const GETHEADERS:[u8; SIZE]  = [0x67, 0x65, 0x74, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x00, 0x00];
pub const TX:[u8; SIZE]          = [0x74, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const HEADERS:[u8; SIZE]     = [0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const BLOCK:[u8; SIZE]       = [0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const GETADDR:[u8; SIZE]     = [0x67, 0x65, 0x74, 0x61, 0x64, 0x64, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const MEMPOOL:[u8; SIZE]     = [0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const PING:[u8; SIZE]        = [0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const PONG:[u8; SIZE]        = [0x70, 0x6f, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const ALERT:[u8; SIZE]       = [0x61, 0x6c, 0x65, 0x72, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const NOTFOUND:[u8; SIZE]    = [0x6e, 0x6f, 0x74, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00];
pub const FILTERLOAD:[u8; SIZE]  = [0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x00, 0x00];
pub const FILTERADD:[u8; SIZE]   = [0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x64, 0x64, 0x00, 0x00, 0x00];
pub const FILTERCLEAR:[u8; SIZE] = [0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x00];
pub const REJECT:[u8; SIZE]      = [0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
pub const SENDHEADERS:[u8; SIZE] = [0x73, 0x65, 0x6e, 0x64, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x00];

#[derive(Debug,Clone)]
pub struct MessageCommand {
   pub data: [u8; SIZE],
}

impl Default for MessageCommand {
   fn default() -> Self {
      MessageCommand { data: [0u8; SIZE] }
   }
}
impl PartialEq for MessageCommand {
   fn eq(&self, that:&Self) -> bool {
      self.data == that.data
   }
}


impl MessageCommand {
   pub fn as_str(&self) -> &str {
      let end = match self.data.iter().position(|&x| x == 0) {
         Some(pos) => pos,
         None      => self.data.len(),
      };
      std::str::from_utf8(&self.data[..end]).unwrap()
   }
}

