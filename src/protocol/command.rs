use std;

pub const SIZE:usize        = 12;

#[derive(Debug)]
pub struct Command {
   pub data: &'static [u8; SIZE],
}

impl PartialEq for Command {
   fn eq(&self, that:&Self) -> bool {
      let lp = self.data as *const u8;
      let rp = that.data as *const u8;
      std::ptr::eq(lp, rp)
   }
}

impl Eq for Command { }

impl Clone for Command {
   fn clone(&self) -> Self {
      Command { data: self.data }
   }
}
impl Copy for Command { }

pub const VERSION:      Command = Command { data: &[0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const VER_ACK:      Command = Command { data: &[0x76, 0x65, 0x72, 0x61, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const ADDR:         Command = Command { data: &[0x61, 0x64, 0x64, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const INV:          Command = Command { data: &[0x69, 0x6e, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const GET_DATA:     Command = Command { data: &[0x67, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const MERKLE_BLOCK: Command = Command { data: &[0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x00] };
pub const GET_BLOCKS:   Command = Command { data: &[0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x00, 0x00, 0x00] };
pub const GET_HEADERS:  Command = Command { data: &[0x67, 0x65, 0x74, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x00, 0x00] };
pub const TX:           Command = Command { data: &[0x74, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const HEADERS:      Command = Command { data: &[0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const BLOCK:        Command = Command { data: &[0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const GET_ADDR:     Command = Command { data: &[0x67, 0x65, 0x74, 0x61, 0x64, 0x64, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const MEM_POOL:     Command = Command { data: &[0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const PING:         Command = Command { data: &[0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const PONG:         Command = Command { data: &[0x70, 0x6f, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const ALERT:        Command = Command { data: &[0x61, 0x6c, 0x65, 0x72, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const NOT_FOUND:    Command = Command { data: &[0x6e, 0x6f, 0x74, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00] };
pub const FILTER_LOAD:  Command = Command { data: &[0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x00, 0x00] };
pub const FILTER_ADD:   Command = Command { data: &[0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x64, 0x64, 0x00, 0x00, 0x00] };
pub const FILTER_CLEAR: Command = Command { data: &[0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x00] };
pub const REJECT:       Command = Command { data: &[0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] };
pub const SEND_HEADERS: Command = Command { data: &[0x73, 0x65, 0x6e, 0x64, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x00] };



#[test]
fn test_ptr() {
   let a = VERSION;
   let b = a; //clone
   assert_eq!(a.data as *const u8,      b.data as *const u8);
   assert_ne!(&a     as *const Command, &b     as *const Command);
   //println!(" a=@{:?} [0]@{:?}", &a as *const Command, a.data as *const u8);
   //println!(" b=@{:?} [0]@{:?}", &b as *const Command, b.data as *const u8);
}
